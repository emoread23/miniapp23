from telegram import Bot
from database import User, Transaction, UserAchievement
from config import BOT_TOKEN, MESSAGES, NOTIFICATION_INTERVAL
from datetime import datetime, timedelta
from sqlalchemy.orm import Session
import logging
import asyncio
from database import (
    get_user_by_telegram_id,
    get_pending_transactions,
    get_user_achievements,
    get_user_upgrades
)

logger = logging.getLogger(__name__)

async def send_notification(bot: Bot, user_id: int, message: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    try:
        await bot.send_message(
            chat_id=user_id,
            text=message,
            parse_mode='HTML'
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")

async def notify_income_received(bot: Bot, user_id: int, amount: float, balance: float):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–∞"""
    try:
        message = MESSAGES['income_received'].format(
            amount=amount,
            balance=balance
        )
        await bot.send_message(
            chat_id=user_id,
            text=message,
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Error sending income notification to {user_id}: {e}")

async def notify_deposit_confirmed(bot: Bot, user_id: int, amount: float, balance: float):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–∞"""
    try:
        message = MESSAGES['deposit_confirmed'].format(
            amount=amount,
            balance=balance
        )
        await bot.send_message(
            chat_id=user_id,
            text=message,
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Error sending deposit confirmation to {user_id}: {e}")

async def notify_withdraw_confirmed(bot: Bot, user_id: int, amount: float, balance: float):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∞"""
    try:
        message = MESSAGES['withdraw_confirmed'].format(
            amount=amount,
            balance=balance
        )
        await bot.send_message(
            chat_id=user_id,
            text=message,
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Error sending withdraw confirmation to {user_id}: {e}")

async def notify_withdraw_cancelled(bot: Bot, user_id: int, amount: float, balance: float):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –≤—ã–≤–æ–¥–∞"""
    try:
        message = MESSAGES['withdraw_cancelled'].format(
            amount=amount,
            balance=balance
        )
        await bot.send_message(
            chat_id=user_id,
            text=message,
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Error sending withdraw cancellation to {user_id}: {e}")

async def notify_referral_bonus(bot: Bot, user_id: int, amount: float, balance: float, referred):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –±–æ–Ω—É—Å–µ"""
    try:
        message = MESSAGES['referral_bonus'].format(
            username=referred.username,
            amount=amount,
            balance=balance
        )
        await bot.send_message(
            chat_id=user_id,
            text=message,
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Error sending referral bonus notification to {user_id}: {e}")

async def notify_level_up(bot: Bot, user_id: int, level: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è"""
    try:
        message = MESSAGES['level_up'].format(level=level)
        await bot.send_message(
            chat_id=user_id,
            text=message,
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Error sending level up notification to {user_id}: {e}")

async def notify_achievement(bot: Bot, user_id: int, achievement: dict):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏"""
    try:
        message = MESSAGES['achievement'].format(
            name=achievement['name'],
            description=achievement['description']
        )
        if 'reward' in achievement:
            message += f"\n\nüéÅ –ù–∞–≥—Ä–∞–¥–∞: {achievement['reward']['amount']} USDT"
        await bot.send_message(
            chat_id=user_id,
            text=message,
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Error sending achievement notification to {user_id}: {e}")

async def notify_upgrade_purchased(bot: Bot, user_id: int, upgrade: dict, level: int):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ –∞–ø–≥—Ä–µ–π–¥–∞"""
    try:
        message = MESSAGES['upgrade_purchased'].format(
            name=upgrade['name'],
            level=level,
            effect=upgrade['effect_description']
        )
        await bot.send_message(
            chat_id=user_id,
            text=message,
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Error sending upgrade purchase notification to {user_id}: {e}")

async def notify_system_message(bot: Bot, user_id: int, message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await bot.send_message(
            chat_id=user_id,
            text=message,
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Error sending system message to {user_id}: {e}")

async def notify_broadcast(bot: Bot, user_ids: list, message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    for user_id in user_ids:
        try:
            await bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"Error sending broadcast to {user_id}: {e}")

async def notify_income_reminder(bot: Bot, user: User, days_until: int):
    """
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–º—Å—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏
    """
    message = f"""
‚è≥ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏</b>

–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å: {days_until} –¥–Ω–µ–π
–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance:.2f} USDT

–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å!
"""
    await send_notification(bot, user.telegram_id, message)

async def process_notifications(bot: Bot, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            pending_transactions = get_pending_transactions(db)
            for transaction in pending_transactions:
                if transaction.type == 'deposit':
                    await notify_deposit_confirmed(
                        bot,
                        transaction.user.telegram_id,
                        transaction.amount,
                        transaction.user.balance
                    )
                elif transaction.type == 'withdraw':
                    await notify_withdraw_confirmed(
                        bot,
                        transaction.user.telegram_id,
                        transaction.amount,
                        transaction.user.balance
                    )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            users = db.query(User).all()
            for user in users:
                achievements = get_user_achievements(db, user.id)
                for achievement in achievements:
                    if not achievement.reward_claimed:
                        await notify_achievement(
                            bot,
                            user.telegram_id,
                            achievement
                        )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ø–≥—Ä–µ–π–¥–æ–≤
            for user in users:
                upgrades = get_user_upgrades(db, user.id)
                for upgrade in upgrades:
                    if upgrade.expires_at and upgrade.expires_at <= datetime.utcnow():
                        await notify_system_message(
                            bot,
                            user.telegram_id,
                            f"‚ö†Ô∏è –í–∞—à –∞–ø–≥—Ä–µ–π–¥ {upgrade.upgrade_id} –∏—Å—Ç–µ–∫!"
                        )

            # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(NOTIFICATION_INTERVAL)

        except Exception as e:
            logger.error(f"Error in notification processing: {e}")
            await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π 
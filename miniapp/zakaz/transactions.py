from database import get_db, User, Transaction
from config import WITHDRAW_DELAY_MIN, WITHDRAW_DELAY_MAX
from notifications import notify_deposit_confirmed, notify_withdraw_confirmed, notify_withdraw_cancelled
import logging
from datetime import datetime, timedelta
import random

logger = logging.getLogger(__name__)

def create_deposit(user: User, amount: float) -> Transaction:
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞"""
    try:
        db = next(get_db())
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = Transaction(
            user_id=user.id,
            type='deposit',
            amount=amount,
            status='pending'
        )
        db.add(transaction)
        db.commit()
        
        logger.info(f"–°–æ–∑–¥–∞–Ω –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {amount} USDT")
        return transaction
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–∞: {e}")
        return None

def create_withdraw(user: User, amount: float, wallet_address: str) -> Transaction:
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤"""
    try:
        db = next(get_db())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if user.balance < amount:
            return None
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = Transaction(
            user_id=user.id,
            type='withdraw',
            amount=amount,
            status='pending',
            wallet_address=wallet_address
        )
        db.add(transaction)
        
        # –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        user.balance -= amount
        
        db.commit()
        
        logger.info(f"–°–æ–∑–¥–∞–Ω –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {amount} USDT")
        return transaction
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤: {e}")
        return None

def confirm_transaction(transaction: Transaction) -> bool:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    try:
        db = next(get_db())
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transaction.status = 'completed'
        transaction.completed_at = datetime.utcnow()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = transaction.user
        if transaction.type == 'deposit':
            user.total_deposit += transaction.amount
            user.balance += transaction.amount
            notify_deposit_confirmed(user, transaction.amount)
        elif transaction.type == 'withdraw':
            user.total_withdraw += transaction.amount
            notify_withdraw_confirmed(user, transaction.amount)
        
        db.commit()
        
        logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction.id}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        return False

def cancel_transaction(transaction: Transaction) -> bool:
    """–û—Ç–º–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    try:
        db = next(get_db())
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transaction.status = 'cancelled'
        transaction.completed_at = datetime.utcnow()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—ã–≤–æ–¥–∞
        if transaction.type == 'withdraw':
            user = transaction.user
            user.balance += transaction.amount
            notify_withdraw_cancelled(user, transaction.amount)
        
        db.commit()
        
        logger.info(f"–û—Ç–º–µ–Ω–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction.id}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        return False

def get_pending_transactions() -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    try:
        db = next(get_db())
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transactions = db.query(Transaction).filter(
            Transaction.status == 'pending'
        ).all()
        
        return transactions
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
        return []

def get_user_transactions(user: User, limit: int = 10) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        db = next(get_db())
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        transactions = db.query(Transaction).filter(
            Transaction.user_id == user.id
        ).order_by(Transaction.created_at.desc()).limit(limit).all()
        
        return transactions
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return []

def format_transaction_info(transaction: Transaction) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    text = f"üí∏ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{transaction.id}\n\n"
    
    if transaction.type == 'deposit':
        text += f"üì• –î–µ–ø–æ–∑–∏—Ç: {transaction.amount} USDT\n"
    elif transaction.type == 'withdraw':
        text += f"üì§ –í—ã–≤–æ–¥: {transaction.amount} USDT\n"
        text += f"üí≥ –ö–æ—à–µ–ª–µ–∫: {transaction.wallet_address}\n"
    elif transaction.type == 'income':
        text += f"üí∞ –î–æ—Ö–æ–¥: {transaction.amount} USDT\n"
    
    text += f"üìÖ –î–∞—Ç–∞: {transaction.created_at.strftime('%d.%m.%Y %H:%M')}\n"
    text += f"üìä –°—Ç–∞—Ç—É—Å: {transaction.status}"
    
    if transaction.completed_at:
        text += f"\n‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {transaction.completed_at.strftime('%d.%m.%Y %H:%M')}"
    
    return text

def format_transactions_list(transactions: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    text = "üí∏ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n\n"
    
    if not transactions:
        text += "üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"
        return text
    
    for transaction in transactions:
        if transaction.type == 'deposit':
            text += f"üì• –î–µ–ø–æ–∑–∏—Ç: {transaction.amount} USDT"
        elif transaction.type == 'withdraw':
            text += f"üì§ –í—ã–≤–æ–¥: {transaction.amount} USDT"
        elif transaction.type == 'income':
            text += f"üí∞ –î–æ—Ö–æ–¥: {transaction.amount} USDT"
        
        text += f" - {transaction.created_at.strftime('%d.%m.%Y')}\n"
    
    return text

def get_withdraw_delay() -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    return random.randint(WITHDRAW_DELAY_MIN, WITHDRAW_DELAY_MAX) 
from database import get_db, User, UserUpgrade
from config import UPGRADES
from notifications import notify_upgrade_purchased
import logging

logger = logging.getLogger(__name__)

def get_available_upgrades(user: User) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–ø–≥—Ä–µ–π–¥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        db = next(get_db())
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–ø–≥—Ä–µ–π–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_upgrades = db.query(UserUpgrade).filter(
            UserUpgrade.user_id == user.id
        ).all()
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—É—â–∏–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –∞–ø–≥—Ä–µ–π–¥–æ–≤
        current_upgrades = {up.upgrade_id: up.level for up in user_upgrades}
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–ø–≥—Ä–µ–π–¥—ã
        available_upgrades = []
        for upgrade in UPGRADES:
            current_level = current_upgrades.get(upgrade['id'], 0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∫—É–ø–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
            if current_level < upgrade['max_level']:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É—Ä–æ–≤–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user.level in upgrade['required_levels']:
                    available_upgrades.append({
                        **upgrade,
                        'current_level': current_level,
                        'next_level': current_level + 1,
                        'price': upgrade['base_price'] * (current_level + 1)
                    })
        
        return available_upgrades
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–ø–≥—Ä–µ–π–¥–æ–≤: {e}")
        return []

def purchase_upgrade(user: User, upgrade_id: str) -> bool:
    """–ü–æ–∫—É–ø–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞"""
    try:
        db = next(get_db())
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ø–≥—Ä–µ–π–¥–µ
        upgrade_info = next((u for u in UPGRADES if u['id'] == upgrade_id), None)
        if not upgrade_info:
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∞–ø–≥—Ä–µ–π–¥–∞
        user_upgrade = db.query(UserUpgrade).filter(
            UserUpgrade.user_id == user.id,
            UserUpgrade.upgrade_id == upgrade_id
        ).first()
        
        current_level = user_upgrade.level if user_upgrade else 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∫—É–ø–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        if current_level >= upgrade_info['max_level']:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É—Ä–æ–≤–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.level not in upgrade_info['required_levels']:
            return False
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        price = upgrade_info['base_price'] * (current_level + 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if user.balance < price:
            return False
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        user.balance -= price
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–ø–≥—Ä–µ–π–¥
        if user_upgrade:
            user_upgrade.level += 1
            user_upgrade.is_active = True
        else:
            user_upgrade = UserUpgrade(
                user_id=user.id,
                upgrade_id=upgrade_id,
                level=1,
                is_active=True
            )
            db.add(user_upgrade)
        
        db.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notify_upgrade_purchased(user, upgrade_info, current_level + 1)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∫—É–ø–∏–ª –∞–ø–≥—Ä–µ–π–¥ {upgrade_id} —É—Ä–æ–≤–Ω—è {current_level + 1}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∞–ø–≥—Ä–µ–π–¥–∞: {e}")
        return False

def get_active_upgrades(user: User) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ø–≥—Ä–µ–π–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        db = next(get_db())
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ø–≥—Ä–µ–π–¥—ã
        active_upgrades = db.query(UserUpgrade).filter(
            UserUpgrade.user_id == user.id,
            UserUpgrade.is_active == True
        ).all()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ø–≥—Ä–µ–π–¥–∞—Ö
        result = []
        for upgrade in active_upgrades:
            upgrade_info = next((u for u in UPGRADES if u['id'] == upgrade.upgrade_id), None)
            if upgrade_info:
                result.append({
                    **upgrade_info,
                    'current_level': upgrade.level
                })
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ø–≥—Ä–µ–π–¥–æ–≤: {e}")
        return []

def format_upgrade_info(upgrade: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–ø–≥—Ä–µ–π–¥–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    text = f"üõç {upgrade['name']}\n\n"
    text += f"üìù {upgrade['description']}\n\n"
    
    if upgrade.get('current_level'):
        text += f"üìä –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {upgrade['current_level']}/{upgrade['max_level']}\n"
        if upgrade['current_level'] < upgrade['max_level']:
            text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {upgrade['base_price'] * (upgrade['current_level'] + 1)} USDT\n"
    else:
        text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {upgrade['base_price']} USDT\n"
        text += f"üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: {upgrade['max_level']}\n"
    
    text += f"\nüîß –≠—Ñ—Ñ–µ–∫—Ç: {upgrade['effect_description']}"
    
    return text

def format_shop_menu(upgrades: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞"""
    text = "üõç –ú–∞–≥–∞–∑–∏–Ω –∞–ø–≥—Ä–µ–π–¥–æ–≤\n\n"
    
    if not upgrades:
        text += "üòî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–ø–≥—Ä–µ–π–¥–æ–≤"
        return text
    
    for upgrade in upgrades:
        text += f"‚Ä¢ {upgrade['name']} "
        if upgrade.get('current_level'):
            text += f"(–£—Ä. {upgrade['current_level']}/{upgrade['max_level']})"
        text += f" - {upgrade['base_price'] * (upgrade.get('current_level', 0) + 1)} USDT\n"
    
    return text 
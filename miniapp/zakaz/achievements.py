from database import get_db, User, UserAchievement
from config import ACHIEVEMENTS
from notifications import notify_achievement
import logging

logger = logging.getLogger(__name__)

def check_achievements(user: User) -> list:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        db = next(get_db())
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_achievements = db.query(UserAchievement).filter(
            UserAchievement.user_id == user.id
        ).all()
        
        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        earned_achievements = {ua.achievement_id for ua in user_achievements}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        new_achievements = []
        for achievement in ACHIEVEMENTS:
            if achievement['id'] not in earned_achievements:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                if check_achievement_conditions(user, achievement):
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
                    user_achievement = UserAchievement(
                        user_id=user.id,
                        achievement_id=achievement['id']
                    )
                    db.add(user_achievement)
                    
                    # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
                    if achievement.get('reward'):
                        reward_type = achievement['reward']['type']
                        reward_amount = achievement['reward']['amount']
                        
                        if reward_type == 'balance':
                            user.balance += reward_amount
                        elif reward_type == 'income_boost':
                            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å –∫ –¥–æ—Ö–æ–¥—É
                            user.income_boost = reward_amount
                            user.income_boost_expires = datetime.utcnow() + timedelta(days=30)
                    
                    new_achievements.append(achievement)
        
        if new_achievements:
            db.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            for achievement in new_achievements:
                notify_achievement(user, achievement)
        
        return new_achievements
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
        return []

def check_achievement_conditions(user: User, achievement: dict) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    try:
        conditions = achievement['conditions']
        
        for condition in conditions:
            condition_type = condition['type']
            condition_value = condition['value']
            
            if condition_type == 'total_deposit':
                if user.total_deposit < condition_value:
                    return False
                    
            elif condition_type == 'total_withdraw':
                if user.total_withdraw < condition_value:
                    return False
                    
            elif condition_type == 'referral_count':
                if user.referral_count < condition_value:
                    return False
                    
            elif condition_type == 'referral_earnings':
                if user.referral_earnings < condition_value:
                    return False
                    
            elif condition_type == 'level':
                if user.level != condition_value:
                    return False
                    
            elif condition_type == 'upgrade_level':
                upgrade_id = condition['upgrade_id']
                required_level = condition_value
                
                db = next(get_db())
                user_upgrade = db.query(UserUpgrade).filter(
                    UserUpgrade.user_id == user.id,
                    UserUpgrade.upgrade_id == upgrade_id
                ).first()
                
                if not user_upgrade or user_upgrade.level < required_level:
                    return False
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—Å–ª–æ–≤–∏–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {e}")
        return False

def get_user_achievements(user: User) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        db = next(get_db())
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_achievements = db.query(UserAchievement).filter(
            UserAchievement.user_id == user.id
        ).all()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
        result = []
        for user_achievement in user_achievements:
            achievement_info = next(
                (a for a in ACHIEVEMENTS if a['id'] == user_achievement.achievement_id),
                None
            )
            if achievement_info:
                result.append({
                    **achievement_info,
                    'earned_at': user_achievement.created_at
                })
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return []

def format_achievement_info(achievement: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏"""
    text = f"üèÜ {achievement['name']}\n\n"
    text += f"üìù {achievement['description']}\n\n"
    
    if achievement.get('earned_at'):
        text += f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: {achievement['earned_at'].strftime('%d.%m.%Y')}\n"
    
    if achievement.get('reward'):
        reward = achievement['reward']
        if reward['type'] == 'balance':
            text += f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: {reward['amount']} USDT"
        elif reward['type'] == 'income_boost':
            text += f"üìà –ù–∞–≥—Ä–∞–¥–∞: +{reward['amount']}% –∫ –¥–æ—Ö–æ–¥—É –Ω–∞ 30 –¥–Ω–µ–π"
    
    return text

def format_achievements_list(achievements: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    text = "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n\n"
    
    if not achievements:
        text += "üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"
        return text
    
    for achievement in achievements:
        text += f"‚Ä¢ {achievement['name']}"
        if achievement.get('earned_at'):
            text += f" ‚úÖ"
        text += "\n"
    
    return text 
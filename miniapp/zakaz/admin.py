from webapp.database import get_session, User, Transaction, ReferralBonus, UserUpgrade, UserAchievement
from config import ADMIN_ID, LEVELS, ADMIN_IDS
from datetime import datetime, timedelta
from sqlalchemy.orm import Session
from sqlalchemy import desc, func
import logging
from transactions import confirm_transaction, cancel_transaction

logger = logging.getLogger(__name__)

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

def get_user_stats(user: User) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        db = next(get_session())
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        transactions = db.query(Transaction).filter(
            Transaction.user_id == user.id
        ).all()
        
        # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_deposits = sum(t.amount for t in transactions if t.type == 'deposit' and t.status == 'completed')
        total_withdraws = sum(t.amount for t in transactions if t.type == 'withdraw' and t.status == 'completed')
        total_income = sum(t.amount for t in transactions if t.type == 'income')
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ø–≥—Ä–µ–π–¥—ã
        active_upgrades = db.query(UserUpgrade).filter(
            UserUpgrade.user_id == user.id,
            UserUpgrade.is_active == True
        ).all()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements = db.query(UserAchievement).filter(
            UserAchievement.user_id == user.id
        ).all()
        
        return {
            'user': user,
            'total_deposits': total_deposits,
            'total_withdraws': total_withdraws,
            'total_income': total_income,
            'active_upgrades': active_upgrades,
            'achievements': achievements
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None

def get_system_stats() -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        db = next(get_session())
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = db.query(User).all()
        
        # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_users = len(users)
        active_users = sum(1 for u in users if u.total_deposit > 0)
        total_deposits = sum(u.total_deposit for u in users)
        total_withdraws = sum(u.total_withdraw for u in users)
        total_income = sum(u.balance for u in users)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        pending_transactions = db.query(Transaction).filter(
            Transaction.status == 'pending'
        ).all()
        
        return {
            'total_users': total_users,
            'active_users': active_users,
            'total_deposits': total_deposits,
            'total_withdraws': total_withdraws,
            'total_income': total_income,
            'pending_transactions': pending_transactions
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
        return None

def format_user_stats(stats: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not stats:
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    
    text = f"üë§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{stats['user'].username}\n\n"
    text += f"üìä –£—Ä–æ–≤–µ–Ω—å: {stats['user'].level}\n"
    text += f"üí∞ –ë–∞–ª–∞–Ω—Å: {stats['user'].balance} USDT\n"
    text += f"üì• –í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: {stats['total_deposits']} USDT\n"
    text += f"üì§ –í—Å–µ–≥–æ –≤—ã–≤–æ–¥–æ–≤: {stats['total_withdraws']} USDT\n"
    text += f"üí∏ –í—Å–µ–≥–æ –¥–æ—Ö–æ–¥–æ–≤: {stats['total_income']} USDT\n"
    text += f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {stats['user'].referral_count}\n"
    text += f"üíé –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {stats['user'].referral_earnings} USDT\n\n"
    
    if stats['active_upgrades']:
        text += "üîß –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ø–≥—Ä–µ–π–¥—ã:\n"
        for upgrade in stats['active_upgrades']:
            text += f"‚Ä¢ {upgrade.upgrade_id} (–£—Ä. {upgrade.level})\n"
    
    if stats['achievements']:
        text += "\nüèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n"
        for achievement in stats['achievements']:
            text += f"‚Ä¢ {achievement.achievement_id}\n"
    
    return text

def format_system_stats(stats: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    if not stats:
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    
    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n\n"
    text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
    text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']}\n"
    text += f"üì• –í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: {stats['total_deposits']} USDT\n"
    text += f"üì§ –í—Å–µ–≥–æ –≤—ã–≤–æ–¥–æ–≤: {stats['total_withdraws']} USDT\n"
    text += f"üí∏ –í—Å–µ–≥–æ –≤ —Å–∏—Å—Ç–µ–º–µ: {stats['total_income']} USDT\n\n"
    
    if stats['pending_transactions']:
        text += "‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n"
        for transaction in stats['pending_transactions']:
            text += f"‚Ä¢ #{transaction.id} - {transaction.type} {transaction.amount} USDT\n"
    
    return text

def process_pending_transactions() -> dict:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    try:
        db = next(get_session())
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transactions = db.query(Transaction).filter(
            Transaction.status == 'pending'
        ).all()
        
        results = {
            'confirmed': 0,
            'cancelled': 0,
            'errors': 0
        }
        
        for transaction in transactions:
            try:
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–ª–∏ –æ—Ç–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                if transaction.type == 'deposit':
                    if confirm_transaction(transaction):
                        results['confirmed'] += 1
                    else:
                        results['errors'] += 1
                elif transaction.type == 'withdraw':
                    if cancel_transaction(transaction):
                        results['cancelled'] += 1
                    else:
                        results['errors'] += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {transaction.id}: {e}")
                results['errors'] += 1
        
        return results
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
        return None

def format_processing_results(results: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    if not results:
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"
    
    text = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n\n"
    text += f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {results['confirmed']}\n"
    text += f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {results['cancelled']}\n"
    text += f"‚ö†Ô∏è –û—à–∏–±–æ–∫: {results['errors']}"
    
    return text

def get_user_stats(db: Session, user_id: int = None) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    """
    stats = {
        'total_users': db.query(User).count(),
        'active_users': db.query(User).filter(User.total_deposit > 0).count(),
        'total_deposits': db.query(User).with_entities(func.sum(User.total_deposit)).scalar() or 0,
        'total_withdraws': db.query(User).with_entities(func.sum(User.total_withdraw)).scalar() or 0,
        'total_referrals': db.query(ReferralBonus).count(),
        'total_referral_bonuses': db.query(ReferralBonus).with_entities(func.sum(ReferralBonus.amount)).scalar() or 0
    }
    
    if user_id:
        user = db.query(User).filter(User.id == user_id).first()
        if user:
            stats.update({
                'user_level': LEVELS[user.level].name,
                'user_balance': user.balance,
                'user_deposits': user.total_deposit,
                'user_withdraws': user.total_withdraw,
                'user_referrals': db.query(User).filter(User.referred_by == user.id).count(),
                'user_referral_bonuses': db.query(ReferralBonus)
                    .filter(ReferralBonus.referrer_id == user.id)
                    .with_entities(func.sum(ReferralBonus.amount))
                    .scalar() or 0,
                'monthly_income': LEVELS[user.level].monthly_income
            })

            # –†–∞—Å—á–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
            current_level_name = user.level
            levels_list = list(LEVELS.keys())
            current_level_index = levels_list.index(current_level_name)

            referrals_to_next_level = 0
            if current_level_index < len(levels_list) - 1:
                next_level_name = levels_list[current_level_index + 1]
                next_level_required_referrals = LEVELS[next_level_name].required_referrals
                # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ user –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç referral_count –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –µ–≥–æ –∏–∑ –ë–î, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
                # –ò—Å—Ö–æ–¥—è –∏–∑ –ø—Ä–æ—à–ª—ã—Ö –æ—à–∏–±–æ–∫, –º—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ referral_count –≤ –º–æ–¥–µ–ª—å User
                user_referral_count = user.referral_count # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç—Ä–∏–±—É—Ç –º–æ–¥–µ–ª–∏
                referrals_to_next_level = max(0, next_level_required_referrals - user_referral_count)

            stats['referrals_to_next_level'] = referrals_to_next_level

    return stats

def get_pending_transactions(db: Session) -> list:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    """
    return db.query(Transaction).filter(
        Transaction.status == 'pending'
    ).order_by(Transaction.created_at.desc()).all()

def approve_transaction(db: Session, transaction_id: int) -> bool:
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    """
    try:
        transaction = db.query(Transaction).filter(Transaction.id == transaction_id).first()
        if not transaction or transaction.status != 'pending':
            return False
        
        transaction.status = 'completed'
        transaction.completed_at = datetime.utcnow()
        
        if transaction.type == 'deposit':
            user = db.query(User).filter(User.id == transaction.user_id).first()
            user.balance += transaction.amount
        
        db.commit()
        return True
        
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {str(e)}")
        return False

def cancel_transaction(db: Session, transaction_id: int) -> bool:
    """
    –û—Ç–º–µ–Ω—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    """
    try:
        transaction = db.query(Transaction).filter(Transaction.id == transaction_id).first()
        if not transaction or transaction.status != 'pending':
            return False
        
        transaction.status = 'cancelled'
        transaction.completed_at = datetime.utcnow()
        
        if transaction.type == 'withdraw':
            user = db.query(User).filter(User.id == transaction.user_id).first()
            user.balance += transaction.amount
        
        db.commit()
        return True
        
    except Exception as e:
        db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {str(e)}")
        return False

def get_user_transactions(db: Session, user_id: int, limit: int = 10) -> list:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    return db.query(Transaction).filter(
        Transaction.user_id == user_id
    ).order_by(desc(Transaction.created_at)).limit(limit).all()

def get_user_referrals(db: Session, user_id: int) -> list:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    return db.query(User).filter(User.referred_by == user_id).all()

def get_user_upgrades(db: Session, user_id: int) -> list:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–ø–≥—Ä–µ–π–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    return db.query(UserUpgrade).filter(UserUpgrade.user_id == user_id).all()

def get_user_achievements(db: Session, user_id: int) -> list:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    return db.query(UserAchievement).filter(UserAchievement.user_id == user_id).all()

def search_users(db: Session, query: str) -> list:
    """
    –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ username –∏–ª–∏ telegram_id
    """
    try:
        telegram_id = int(query)
        return db.query(User).filter(User.telegram_id == telegram_id).all()
    except ValueError:
        return db.query(User).filter(User.username.ilike(f"%{query}%")).all()

def get_recent_activity(db: Session, days: int = 7) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
    """
    start_date = datetime.utcnow() - timedelta(days=days)
    
    return {
        'new_users': db.query(User).filter(User.created_at >= start_date).count(),
        'new_deposits': db.query(Transaction).filter(
            Transaction.type == 'deposit',
            Transaction.created_at >= start_date
        ).count(),
        'total_deposits_amount': db.query(Transaction).filter(
            Transaction.type == 'deposit',
            Transaction.created_at >= start_date
        ).with_entities(func.sum(Transaction.amount)).scalar() or 0,
        'new_withdraws': db.query(Transaction).filter(
            Transaction.type == 'withdraw',
            Transaction.created_at >= start_date
        ).count(),
        'total_withdraws_amount': db.query(Transaction).filter(
            Transaction.type == 'withdraw',
            Transaction.created_at >= start_date
        ).with_entities(func.sum(Transaction.amount)).scalar() or 0
    } 
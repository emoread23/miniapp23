import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes, ConversationHandler
from config import BOT_TOKEN, WELCOME_MESSAGE, HELP_MESSAGE, MESSAGES, LEVELS, REFERRAL_PERCENTS, WITHDRAW_DELAY_MIN, WITHDRAW_DELAY_MAX, UPGRADES, WEBAPP_URL
from webapp.database import init_db_standalone, get_session, User, Transaction, ReferralBonus, UserUpgrade, UserAchievement
from keyboards import (
    get_main_keyboard, get_admin_keyboard, get_level_keyboard,
    get_confirm_keyboard, get_shop_keyboard, get_back_keyboard, get_miniapp_keyboard
)
import random
import string
from datetime import datetime, timedelta
from utils import process_referral_bonus
from income import calculate_user_income, process_monthly_income, format_time_until_next_income
from admin import (
    is_admin, get_user_stats, get_pending_transactions, approve_transaction,
    cancel_transaction, get_user_transactions, get_user_referrals,
    get_user_upgrades, get_user_achievements, search_users, get_recent_activity
)
from notifications import (
    notify_income_received, notify_deposit_confirmed, notify_withdraw_confirmed,
    notify_withdraw_cancelled, notify_referral_bonus, notify_level_up,
    notify_achievement, notify_upgrade_purchased, process_notifications
)
import asyncio
import threading
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
DEPOSIT_AMOUNT, WITHDRAW_AMOUNT = range(2)
ADMIN_SEARCH, ADMIN_USER_ACTION = range(2)
APPROVE_CONFIRM, CANCEL_CONFIRM = range(2)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
ADMIN_SEARCH, ADMIN_USER_ACTION = range(2)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
def generate_referral_code():
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –º–∏–Ω–∏–∞–ø–ø–∞."""
    web_app_url = "https://miniapp123.vercel.app/" # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à URL –Ω–∞ Vercel
    user_id = update.effective_user.id # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard = get_miniapp_keyboard(web_app_url, user_id) # –ü–µ—Ä–µ–¥–∞–µ–º user_id –≤ —Ñ—É–Ω–∫—Ü–∏—é

    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Empire Quest.\n\n"
        "–ó–¥–µ—Å—å —Ç—ã —Å—Ç—Ä–æ–∏—à—å —Å–≤–æ—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–º–ø–µ—Ä–∏—é, –ø—Ä–∏–≤–ª–µ–∫–∞—è –¥—Ä—É–∑–µ–π –∏ –ø—Ä–æ–∫–∞—á–∏–≤–∞—è —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å.\n\n"
        "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ—é –ò–º–ø–µ—Ä–∏—é!"
    )

    await update.message.reply_text(
        welcome_message,
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_MESSAGE)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not is_admin(user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    db = next(get_session())
    stats = get_user_stats(db)
    
    text = f"""
üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']}
üíé –í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: {stats['total_deposits']:.2f} USDT
üí∞ –í—Å–µ–≥–æ –≤—ã–≤–æ–¥–æ–≤: {stats['total_withdraws']:.2f} USDT
üë• –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {stats['total_referrals']}
üéÅ –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤: {stats['total_referral_bonuses']:.2f} USDT

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    keyboard = [
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search")],
        [InlineKeyboardButton("üìù –û–∂–∏–¥–∞—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="admin_pending")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="admin_stats")]
    ]
    
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def admin_search_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "admin_search":
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        )
        return ADMIN_SEARCH

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
async def process_admin_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    search_query = update.message.text
    db = next(get_session())
    users = search_users(db, search_query)
    
    if not users:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return ConversationHandler.END
    
    text = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n"
    keyboard = []
    
    for user in users:
        text += f"üë§ @{user.username} (ID: {user.telegram_id})\n"
        text += f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance:.2f} USDT\n"
        text += f"üíé –î–µ–ø–æ–∑–∏—Ç—ã: {user.total_deposit:.2f} USDT\n"
        text += f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {len(user.referrals)}\n\n"
        
        keyboard.append([InlineKeyboardButton(
            f"–í—ã–±—Ä–∞—Ç—å @{user.username}",
            callback_data=f"admin_user_{user.id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
    
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return ADMIN_USER_ACTION

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def admin_user_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "admin_back":
        await admin_panel(update, context)
        return ConversationHandler.END
    
    if query.data.startswith("admin_user_"):
        user_id = int(query.data.split("_")[2])
        db = next(get_session())
        user = db.query(User).filter(User.id == user_id).first()
        
        if not user:
            await query.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        stats = get_user_stats(db, user.id)
        transactions = get_user_transactions(db, user.id)
        
        text = f"""
üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:
Username: @{user.username}
ID: {user.telegram_id}
–£—Ä–æ–≤–µ–Ω—å: {stats['user_level']}
–ë–∞–ª–∞–Ω—Å: {stats['user_balance']:.2f} USDT
–î–µ–ø–æ–∑–∏—Ç—ã: {stats['user_deposits']:.2f} USDT
–í—ã–≤–æ–¥—ã: {stats['user_withdraws']:.2f} USDT
–†–µ—Ñ–µ—Ä–∞–ª—ã: {stats['user_referrals']}
–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã: {stats['user_referral_bonuses']:.2f} USDT

–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:
"""
        
        for trans in transactions:
            text += f"\n{trans.type}: {trans.amount:.2f} USDT ({trans.status})"
        
        keyboard = [
            [InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"admin_stats_{user.id}")],
            [InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data=f"admin_referrals_{user.id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
async def admin_pending_transactions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "admin_pending":
        db = next(get_session())
        transactions = get_pending_transactions(db)
        
        if not transactions:
            await query.message.reply_text("‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            return
        
        text = "üìù –û–∂–∏–¥–∞—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n\n"
        keyboard = []
        
        for trans in transactions:
            user = db.query(User).filter(User.id == trans.user_id).first()
            text += f"ID: {trans.id}\n"
            text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username}\n"
            text += f"–¢–∏–ø: {trans.type}\n"
            text += f"–°—É–º–º–∞: {trans.amount:.2f} USDT\n"
            text += f"–î–∞—Ç–∞: {trans.created_at}\n\n"
            
            keyboard.extend([
                [InlineKeyboardButton(
                    f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {trans.id}",
                    callback_data=f"admin_approve_{trans.id}"
                )],
                [InlineKeyboardButton(
                    f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {trans.id}",
                    callback_data=f"admin_cancel_{trans.id}"
                )]
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
        
        await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "admin_stats":
        db = next(get_session())
        activity = get_recent_activity(db)
        
        text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:

üë• –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {activity['new_users']}
üíé –ù–æ–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤: {activity['new_deposits']}
üí∞ –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: {activity['total_deposits_amount']:.2f} USDT
üí∏ –ù–æ–≤—ã—Ö –≤—ã–≤–æ–¥–æ–≤: {activity['new_withdraws']}
üíµ –°—É–º–º–∞ –≤—ã–≤–æ–¥–æ–≤: {activity['total_withdraws_amount']:.2f} USDT
"""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
        await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ—è –ò–º–ø–µ—Ä–∏—è"
async def my_empire(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ—è –ò–º–ø–µ—Ä–∏—è'"""
    user = update.effective_user
    db = next(get_session())
    db_user = db.query(User).filter(User.telegram_id == user.id).first()
    
    if not db_user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stats = get_user_stats(db, db_user.id)
    
    text = f"""
üëë –ú–æ—è –ò–º–ø–µ—Ä–∏—è

–£—Ä–æ–≤–µ–Ω—å: {stats['user_level']}
–ë–∞–ª–∞–Ω—Å: {stats['user_balance']:.2f} USDT
–î–æ—Ö–æ–¥ –≤ –º–µ—Å—è—Ü: {stats['monthly_income']:.2f} USDT
–°–ª–µ–¥—É—é—â–∞—è –≤—ã–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑: {format_time_until_next_income(db_user)}

üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:
–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {stats['user_referrals']}
–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {stats['user_referral_bonuses']:.2f} USDT
–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {stats['referrals_to_next_level']} –¥—Ä—É–∑–µ–π
"""
    
    keyboard = [
        [InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_detailed")],
        [InlineKeyboardButton("üë• –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="my_referrals")]
    ]
    
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å"
async def invest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å'"""
    user = update.effective_user
    db = next(get_session())
    db_user = db.query(User).filter(User.telegram_id == user.id).first()
    
    if not db_user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    text = """
üíé –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å

–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:
"""
    
    keyboard = get_level_keyboard()
    await update.message.reply_text(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ã–≤–µ—Å—Ç–∏ –ø—Ä–∏–±—ã–ª—å"
async def withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—ã–≤–µ—Å—Ç–∏ –ø—Ä–∏–±—ã–ª—å'"""
    user = update.effective_user
    db = next(get_session())
    db_user = db.query(User).filter(User.telegram_id == user.id).first()
    
    if not db_user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if db_user.balance <= 0:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞")
        return
    
    text = f"""
üí∞ –í—ã–≤–µ—Å—Ç–∏ –ø—Ä–∏–±—ã–ª—å

–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: {db_user.balance:.2f} USDT
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 10 USDT

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:
"""
    
    await update.message.reply_text(text)
    return WITHDRAW_AMOUNT

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î—Ä—É–∑—å—è"
async def friends(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î—Ä—É–∑—å—è'"""
    user = update.effective_user
    db = next(get_session())
    db_user = db.query(User).filter(User.telegram_id == user.id).first()
    
    if not db_user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    referrals = get_user_referrals(db, db_user.id)
    
    text = f"""
üë• –î—Ä—É–∑—å—è

–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
https://t.me/{context.bot.username}?start={db_user.referral_code}

–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {len(referrals)}
"""
    
    if referrals:
        text += "\n–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n"
        for i, ref in enumerate(referrals, 1):
            text += f"{i}. @{ref.username} - {ref.total_deposit:.2f} USDT\n"
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="referral_stats")],
        [InlineKeyboardButton("üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã", callback_data="referral_bonuses")]
    ]
    
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–∞–≥–∞–∑–∏–Ω"
async def shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–∞–≥–∞–∑–∏–Ω'"""
    text = """
üè™ –ú–∞–≥–∞–∑–∏–Ω

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:
"""
    
    keyboard = get_shop_keyboard()
    await update.message.reply_text(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤"
async def top_players(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤'"""
    db = next(get_session())
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É
    top_balance = db.query(User).order_by(User.balance.desc()).limit(10).all()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
    top_referrals = db.query(User).order_by(User.referral_count.desc()).limit(10).all()
    
    text = """
üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤

–¢–æ–ø –ø–æ –±–∞–ª–∞–Ω—Å—É:
"""
    
    for i, user in enumerate(top_balance, 1):
        text += f"{i}. @{user.username} - {user.balance:.2f} USDT\n"
    
    text += "\n–¢–æ–ø –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º:\n"
    for i, user in enumerate(top_referrals, 1):
        text += f"{i}. @{user.username} - {user.referral_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_top")],
        [InlineKeyboardButton("üìä –ú–æ—è –ø–æ–∑–∏—Ü–∏—è", callback_data="my_position")]
    ]
    
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –∞–ø–≥—Ä–µ–π–¥–∞
async def buy_upgrade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if not query.data.startswith('buy_upgrade_'):
        return
    
    upgrade_id = int(query.data.split('_')[2])
    user = update.effective_user
    db = next(get_session())
    db_user = db.query(User).filter(User.telegram_id == user.id).first()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ø–≥—Ä–µ–π–¥–µ
    upgrade_info = UPGRADES[upgrade_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∞–ø–≥—Ä–µ–π–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_upgrade = db.query(UserUpgrade).filter(
        UserUpgrade.user_id == db_user.id,
        UserUpgrade.upgrade_id == upgrade_id
    ).first()
    
    if user_upgrade and user_upgrade.level >= upgrade_info['max_level']:
        await query.message.reply_text("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–ø–≥—Ä–µ–π–¥–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if db_user.balance < upgrade_info['price']:
        await query.message.reply_text(MESSAGES['shop']['not_enough'])
        return
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –∞–ø–≥—Ä–µ–π–¥
    db_user.balance -= upgrade_info['price']
    
    if user_upgrade:
        user_upgrade.level += 1
        new_level = user_upgrade.level
    else:
        new_upgrade = UserUpgrade(
            user_id=db_user.id,
            upgrade_id=upgrade_id,
            level=1
        )
        db.add(new_upgrade)
        new_level = 1
    
    db.commit()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await notify_upgrade_purchased(context.bot, db_user, upgrade_info['name'], new_level)
    
    await query.message.reply_text(
        f"{MESSAGES['shop']['success']}\n\n"
        f"üéÆ –ê–ø–≥—Ä–µ–π–¥: {upgrade_info['name']}\n"
        f"üìù –£—Ä–æ–≤–µ–Ω—å: {new_level}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {upgrade_info['price']} USDT"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
async def show_achievements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db = next(get_session())
    db_user = db.query(User).filter(User.telegram_id == user.id).first()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_achievements = db.query(UserAchievement).filter(
        UserAchievement.user_id == db_user.id
    ).all()
    
    text = "üèÜ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n"
    
    for achievement in UPGRADES:
        is_achieved = any(ua.upgrade_id == UPGRADES.index(achievement) for ua in user_achievements)
        status = "‚úÖ" if is_achieved else "‚è≥"
        text += f"{status} {achievement['name']}\n"
        text += f"üìù {achievement['description']}\n"
        if is_achieved:
            text += f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {achievement['reward']['value']} USDT\n"
        text += "\n"
    
    await update.message.reply_text(text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–ø–≥—Ä–µ–π–¥–æ–≤
async def show_upgrades(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db = next(get_session())
    db_user = db.query(User).filter(User.telegram_id == user.id).first()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–ø–≥—Ä–µ–π–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_upgrades = db.query(UserUpgrade).filter(
        UserUpgrade.user_id == db_user.id
    ).all()
    
    text = "üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–ø–≥—Ä–µ–π–¥—ã:\n\n"
    keyboard = []
    
    for i, upgrade in enumerate(UPGRADES):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∞–ø–≥—Ä–µ–π–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_upgrade = next((u for u in user_upgrades if u.upgrade_id == i), None)
        current_level = user_upgrade.level if user_upgrade else 0
        
        text += f"{upgrade['name']}\n"
        text += f"üìù {upgrade['description']}\n"
        text += f"üí∞ –¶–µ–Ω–∞: {upgrade['price']} USDT\n"
        text += f"üìà –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {current_level}/{upgrade['max_level']}\n\n"
        
        if current_level < upgrade['max_level']:
            keyboard.append([InlineKeyboardButton(
                f"–ö—É–ø–∏—Ç—å {upgrade['name']}",
                callback_data=f"buy_upgrade_{i}"
            )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
    
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("level_"):
        level_index = int(query.data.split("_")[1])
        levels = list(LEVELS.keys())
        level = levels[level_index]
        
        text = f"""
–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å: {level}
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç: {LEVELS[level]['minDeposit']} USDT
–î–æ—Ö–æ–¥ –≤ –º–µ—Å—è—Ü: {LEVELS[level]['income']}%

–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥—Ä–µ—Å:
TRC20: {context.bot_data.get('wallet_address', 'ADDRESS_NOT_SET')}

–ü–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
"""
        
        keyboard = get_confirm_keyboard()
        await query.message.edit_text(text, reply_markup=keyboard)
    
    elif query.data == "confirm_yes":
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞
        await query.message.edit_text("‚úÖ –í–∞—à –¥–µ–ø–æ–∑–∏—Ç –ø—Ä–∏–Ω—è—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
    
    elif query.data == "confirm_no":
        await query.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    elif query.data.startswith("shop_"):
        category = query.data.split("_")[1]
        if category == "upgrades":
            text = "üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–ø–≥—Ä–µ–π–¥—ã:\n\n"
            for upgrade in UPGRADES:
                text += f"{upgrade['name']} - {upgrade['price']} USDT\n"
                text += f"{upgrade['description']}\n\n"
        elif category == "achievements":
            text = "üèÜ NFT-–∞—á–∏–≤–∫–∏:\n\n"
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –∞—á–∏–≤–æ–∫
        elif category == "boosts":
            text = "‚ö°Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—É—Å—Ç—ã:\n\n"
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –±—É—Å—Ç–æ–≤
        
        keyboard = get_back_keyboard()
        await query.message.edit_text(text, reply_markup=keyboard)
    
    elif query.data == "back":
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
    
    elif query.data == "stats_detailed":
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        pass
    
    elif query.data == "my_referrals":
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        pass
    
    elif query.data == "referral_stats":
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        pass
    
    elif query.data == "referral_bonuses":
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–∞—Ö
        pass
    
    elif query.data == "refresh_top":
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤
        await top_players(update, context)
    
    elif query.data == "my_position":
        # –ü–æ–∫–∞–∑ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–æ–ø–µ
        pass

async def process_monthly_income_task(context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    """
    try:
        db = next(get_session())
        users = db.query(User).filter(User.total_deposit > 0).all()

        for user in users:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
            current_user = db.query(User).filter(User.id == user.id).first()
            if current_user:
                income = calculate_user_income(db, current_user)
                if income > 0:
                    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                    transaction = Transaction(
                        user_id=current_user.id,
                        amount=income,
                        type='income',
                        status='completed',
                        created_at=datetime.utcnow(),
                        completed_at=datetime.utcnow()
                    )
                    db.add(transaction)

                    # –ù–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
                    current_user.balance += income

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    # –ü–µ—Ä–µ–¥–∞–µ–º bot —è–≤–Ω–æ
                    await notify_income_received(context.bot, current_user, income)

        db.commit()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        # –ü–µ—Ä–µ–¥–∞–µ–º bot —è–≤–Ω–æ
        await process_notifications(db, context.bot)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
async def admin_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not is_admin(user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    db = next(get_session())
    users = db.query(User).all()
    
    text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    keyboard = []
    
    for user in users:
        text += f"üë§ @{user.username} (ID: {user.telegram_id})\n"
        text += f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance:.2f} USDT\n"
        text += f"üíé –î–µ–ø–æ–∑–∏—Ç—ã: {user.total_deposit:.2f} USDT\n"
        text += f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {len(user.referrals)}\n\n"
        
        keyboard.append([InlineKeyboardButton(
            f"–í—ã–±—Ä–∞—Ç—å @{user.username}",
            callback_data=f"admin_user_{user.id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
    
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /transactions –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
async def admin_transactions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not is_admin(user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    db = next(get_session())
    transactions = db.query(Transaction).order_by(Transaction.created_at.desc()).limit(10).all()
    
    text = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n\n"
    keyboard = []
    
    for trans in transactions:
        user = db.query(User).filter(User.id == trans.user_id).first()
        text += f"ID: {trans.id}\n"
        text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username}\n"
        text += f"üí∞ –°—É–º–º–∞: {trans.amount:.2f} USDT\n"
        text += f"üìã –¢–∏–ø: {trans.type}\n"
        text += f"üìä –°—Ç–∞—Ç—É—Å: {trans.status}\n"
        text += f"üïí –î–∞—Ç–∞: {trans.created_at}\n\n"
        
        if trans.status == 'pending':
            keyboard.extend([
                [InlineKeyboardButton(
                    f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {trans.id}",
                    callback_data=f"admin_approve_{trans.id}"
                )],
                [InlineKeyboardButton(
                    f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {trans.id}",
                    callback_data=f"admin_cancel_{trans.id}"
                )]
            ])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
    
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async def confirm_approve(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not is_admin(user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return ConversationHandler.END
    
    try:
        transaction_id = int(update.message.text)
        db = next(get_session())
        
        if approve_transaction(db, transaction_id):
            transaction = db.query(Transaction).filter(Transaction.id == transaction_id).first()
            if transaction.type == 'deposit':
                await notify_deposit_confirmed(context.bot, transaction.user, transaction.amount)
            elif transaction.type == 'withdraw':
                await notify_withdraw_confirmed(context.bot, transaction.user, transaction.amount)
            await update.message.reply_text("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async def confirm_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not is_admin(user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return ConversationHandler.END
    
    try:
        transaction_id = int(update.message.text)
        db = next(get_session())
        
        if cancel_transaction(db, transaction_id):
            transaction = db.query(Transaction).filter(Transaction.id == transaction_id).first()
            if transaction.type == 'withdraw':
                await notify_withdraw_cancelled(context.bot, transaction.user, transaction.amount)
            await update.message.reply_text("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
async def open_webapp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # TODO: –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç URL –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL –≤–∞—à–µ–≥–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    webapp_url = "–í–ê–®_URL_–ú–ò–ù–ò_–ü–†–ò–õ–û–ñ–ï–ù–ò–Ø_–ù–ê_AMVERA"
    keyboard = [
        [KeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=webapp_url))]
    ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=reply_markup
    )

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º standalone —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ get_session
    # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –Ω–∞ Amvera
    # init_db_standalone() # <-- –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("admin", admin_panel))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ (—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, my_empire, block=False))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, invest, block=False))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, withdraw, block=False))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, friends, block=False))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, shop, block=False))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, top_players, block=False))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" (–æ–Ω–∞ —Ç–æ–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, open_webapp, block=False))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback query –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    admin_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(admin_search_user, pattern='^admin_search')],
        states={
            ADMIN_SEARCH: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_admin_search)],
            ADMIN_USER_ACTION: [CallbackQueryHandler(admin_user_action, pattern='^admin_')],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    application.add_handler(admin_conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏–π
    application.add_handler(CallbackQueryHandler(admin_pending_transactions, pattern='^admin_pending'))
    application.add_handler(CallbackQueryHandler(admin_stats, pattern='^admin_stats'))
    application.add_handler(CallbackQueryHandler(confirm_approve, pattern='^admin_approve_'))
    application.add_handler(CallbackQueryHandler(confirm_cancel, pattern='^admin_cancel_'))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—é –¥–æ—Ö–æ–¥–∞
    # –ü–µ—Ä–µ–¥–∞–µ–º context –≤ job_queue - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    # application.job_queue.run_repeating(process_monthly_income_task, interval=timedelta(days=30), first=timedelta(days=30)) # <-- –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ

    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    # –ü–µ—Ä–µ–¥–∞–µ–º context –≤ job_queue - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    # application.job_queue.run_repeating(process_notifications, interval=timedelta(minutes=1)) # <-- –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ

    # –ó–∞–ø—É—Å–∫–∞–µ–º Polling
    application.run_polling(poll_interval=3)

if __name__ == '__main__':
    main() 